#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonalPopuplation
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CPSC471")]
	public partial class DatabaseClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAirline_Company(Airline_Company instance);
    partial void UpdateAirline_Company(Airline_Company instance);
    partial void DeleteAirline_Company(Airline_Company instance);
    partial void InsertAirline_Sale(Airline_Sale instance);
    partial void UpdateAirline_Sale(Airline_Sale instance);
    partial void DeleteAirline_Sale(Airline_Sale instance);
    partial void InsertCreditCard(CreditCard instance);
    partial void UpdateCreditCard(CreditCard instance);
    partial void DeleteCreditCard(CreditCard instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertBid(Bid instance);
    partial void UpdateBid(Bid instance);
    partial void DeleteBid(Bid instance);
    partial void InsertFlight(Flight instance);
    partial void UpdateFlight(Flight instance);
    partial void DeleteFlight(Flight instance);
    partial void InsertAirport(Airport instance);
    partial void UpdateAirport(Airport instance);
    partial void DeleteAirport(Airport instance);
    partial void InsertMajor_City(Major_City instance);
    partial void UpdateMajor_City(Major_City instance);
    partial void DeleteMajor_City(Major_City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertPassenger_has_bid(Passenger_has_bid instance);
    partial void UpdatePassenger_has_bid(Passenger_has_bid instance);
    partial void DeletePassenger_has_bid(Passenger_has_bid instance);
    partial void InsertPassenger(Passenger instance);
    partial void UpdatePassenger(Passenger instance);
    partial void DeletePassenger(Passenger instance);
    partial void InsertBlacklist(Blacklist instance);
    partial void UpdateBlacklist(Blacklist instance);
    partial void DeleteBlacklist(Blacklist instance);
    partial void InsertPath(Path instance);
    partial void UpdatePath(Path instance);
    partial void DeletePath(Path instance);
    #endregion
		
		public DatabaseClassDataContext() : 
				base(global::PersonalPopuplation.Properties.Settings.Default.CPSC471ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Airline_Company> Airline_Companies
		{
			get
			{
				return this.GetTable<Airline_Company>();
			}
		}
		
		public System.Data.Linq.Table<Airline_Sale> Airline_Sales
		{
			get
			{
				return this.GetTable<Airline_Sale>();
			}
		}
		
		public System.Data.Linq.Table<CreditCard> CreditCards
		{
			get
			{
				return this.GetTable<CreditCard>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<Bid> Bids
		{
			get
			{
				return this.GetTable<Bid>();
			}
		}
		
		public System.Data.Linq.Table<Flight> Flights
		{
			get
			{
				return this.GetTable<Flight>();
			}
		}
		
		public System.Data.Linq.Table<Airport> Airports
		{
			get
			{
				return this.GetTable<Airport>();
			}
		}
		
		public System.Data.Linq.Table<Major_City> Major_Cities
		{
			get
			{
				return this.GetTable<Major_City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Passenger_has_bid> Passenger_has_bids
		{
			get
			{
				return this.GetTable<Passenger_has_bid>();
			}
		}
		
		public System.Data.Linq.Table<Passenger> Passengers
		{
			get
			{
				return this.GetTable<Passenger>();
			}
		}
		
		public System.Data.Linq.Table<Blacklist> Blacklists
		{
			get
			{
				return this.GetTable<Blacklist>();
			}
		}
		
		public System.Data.Linq.Table<Path> Paths
		{
			get
			{
				return this.GetTable<Path>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airline_Company")]
	public partial class Airline_Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _company_name;
		
		private string _cityName;
		
		private EntitySet<Airline_Sale> _Airline_Sales;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncompany_nameChanging(string value);
    partial void Oncompany_nameChanged();
    partial void OncityNameChanging(string value);
    partial void OncityNameChanged();
    #endregion
		
		public Airline_Company()
		{
			this._Airline_Sales = new EntitySet<Airline_Sale>(new Action<Airline_Sale>(this.attach_Airline_Sales), new Action<Airline_Sale>(this.detach_Airline_Sales));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_company_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string company_name
		{
			get
			{
				return this._company_name;
			}
			set
			{
				if ((this._company_name != value))
				{
					this.Oncompany_nameChanging(value);
					this.SendPropertyChanging();
					this._company_name = value;
					this.SendPropertyChanged("company_name");
					this.Oncompany_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string cityName
		{
			get
			{
				return this._cityName;
			}
			set
			{
				if ((this._cityName != value))
				{
					this.OncityNameChanging(value);
					this.SendPropertyChanging();
					this._cityName = value;
					this.SendPropertyChanged("cityName");
					this.OncityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airline_Company_Airline_Sale", Storage="_Airline_Sales", ThisKey="company_name", OtherKey="Name")]
		public EntitySet<Airline_Sale> Airline_Sales
		{
			get
			{
				return this._Airline_Sales;
			}
			set
			{
				this._Airline_Sales.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Airline_Sales(Airline_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Airline_Company = this;
		}
		
		private void detach_Airline_Sales(Airline_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Airline_Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airline_Sale")]
	public partial class Airline_Sale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Flight_id;
		
		private EntityRef<Airline_Company> _Airline_Company;
		
		private EntityRef<Flight> _Flight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFlight_idChanging(string value);
    partial void OnFlight_idChanged();
    #endregion
		
		public Airline_Sale()
		{
			this._Airline_Company = default(EntityRef<Airline_Company>);
			this._Flight = default(EntityRef<Flight>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					if (this._Airline_Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flight_id", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Flight_id
		{
			get
			{
				return this._Flight_id;
			}
			set
			{
				if ((this._Flight_id != value))
				{
					if (this._Flight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlight_idChanging(value);
					this.SendPropertyChanging();
					this._Flight_id = value;
					this.SendPropertyChanged("Flight_id");
					this.OnFlight_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airline_Company_Airline_Sale", Storage="_Airline_Company", ThisKey="Name", OtherKey="company_name", IsForeignKey=true)]
		public Airline_Company Airline_Company
		{
			get
			{
				return this._Airline_Company.Entity;
			}
			set
			{
				Airline_Company previousValue = this._Airline_Company.Entity;
				if (((previousValue != value) 
							|| (this._Airline_Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airline_Company.Entity = null;
						previousValue.Airline_Sales.Remove(this);
					}
					this._Airline_Company.Entity = value;
					if ((value != null))
					{
						value.Airline_Sales.Add(this);
						this._Name = value.company_name;
					}
					else
					{
						this._Name = default(string);
					}
					this.SendPropertyChanged("Airline_Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Airline_Sale", Storage="_Flight", ThisKey="Flight_id", OtherKey="Flight_id", IsForeignKey=true)]
		public Flight Flight
		{
			get
			{
				return this._Flight.Entity;
			}
			set
			{
				Flight previousValue = this._Flight.Entity;
				if (((previousValue != value) 
							|| (this._Flight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight.Entity = null;
						previousValue.Airline_Sales.Remove(this);
					}
					this._Flight.Entity = value;
					if ((value != null))
					{
						value.Airline_Sales.Add(this);
						this._Flight_id = value.Flight_id;
					}
					else
					{
						this._Flight_id = default(string);
					}
					this.SendPropertyChanged("Flight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditCard")]
	public partial class CreditCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _passport_number;
		
		private string _creditcard_number;
		
		private string _cardholdername;
		
		private string _billing_address;
		
		private string _security_num;
		
		private System.DateTime _expiry_date;
		
		private EntityRef<Passenger> _Passenger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpassport_numberChanging(string value);
    partial void Onpassport_numberChanged();
    partial void Oncreditcard_numberChanging(string value);
    partial void Oncreditcard_numberChanged();
    partial void OncardholdernameChanging(string value);
    partial void OncardholdernameChanged();
    partial void Onbilling_addressChanging(string value);
    partial void Onbilling_addressChanged();
    partial void Onsecurity_numChanging(string value);
    partial void Onsecurity_numChanged();
    partial void Onexpiry_dateChanging(System.DateTime value);
    partial void Onexpiry_dateChanged();
    #endregion
		
		public CreditCard()
		{
			this._Passenger = default(EntityRef<Passenger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passport_number", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string passport_number
		{
			get
			{
				return this._passport_number;
			}
			set
			{
				if ((this._passport_number != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpassport_numberChanging(value);
					this.SendPropertyChanging();
					this._passport_number = value;
					this.SendPropertyChanged("passport_number");
					this.Onpassport_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creditcard_number", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string creditcard_number
		{
			get
			{
				return this._creditcard_number;
			}
			set
			{
				if ((this._creditcard_number != value))
				{
					this.Oncreditcard_numberChanging(value);
					this.SendPropertyChanging();
					this._creditcard_number = value;
					this.SendPropertyChanged("creditcard_number");
					this.Oncreditcard_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardholdername", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string cardholdername
		{
			get
			{
				return this._cardholdername;
			}
			set
			{
				if ((this._cardholdername != value))
				{
					this.OncardholdernameChanging(value);
					this.SendPropertyChanging();
					this._cardholdername = value;
					this.SendPropertyChanged("cardholdername");
					this.OncardholdernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_billing_address", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string billing_address
		{
			get
			{
				return this._billing_address;
			}
			set
			{
				if ((this._billing_address != value))
				{
					this.Onbilling_addressChanging(value);
					this.SendPropertyChanging();
					this._billing_address = value;
					this.SendPropertyChanged("billing_address");
					this.Onbilling_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_security_num", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string security_num
		{
			get
			{
				return this._security_num;
			}
			set
			{
				if ((this._security_num != value))
				{
					this.Onsecurity_numChanging(value);
					this.SendPropertyChanging();
					this._security_num = value;
					this.SendPropertyChanged("security_num");
					this.Onsecurity_numChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expiry_date", DbType="DateTime NOT NULL")]
		public System.DateTime expiry_date
		{
			get
			{
				return this._expiry_date;
			}
			set
			{
				if ((this._expiry_date != value))
				{
					this.Onexpiry_dateChanging(value);
					this.SendPropertyChanging();
					this._expiry_date = value;
					this.SendPropertyChanged("expiry_date");
					this.Onexpiry_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_CreditCard", Storage="_Passenger", ThisKey="passport_number", OtherKey="passport_number", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.CreditCards.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.CreditCards.Add(this);
						this._passport_number = value.passport_number;
					}
					else
					{
						this._passport_number = default(string);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seat")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _seat_id;
		
		private string _flight_id;
		
		private System.DateTime _end_auction_date;
		
		private EntitySet<Bid> _Bids;
		
		private EntityRef<Flight> _Flight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onseat_idChanging(string value);
    partial void Onseat_idChanged();
    partial void Onflight_idChanging(string value);
    partial void Onflight_idChanged();
    partial void Onend_auction_dateChanging(System.DateTime value);
    partial void Onend_auction_dateChanged();
    #endregion
		
		public Seat()
		{
			this._Bids = new EntitySet<Bid>(new Action<Bid>(this.attach_Bids), new Action<Bid>(this.detach_Bids));
			this._Flight = default(EntityRef<Flight>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string seat_id
		{
			get
			{
				return this._seat_id;
			}
			set
			{
				if ((this._seat_id != value))
				{
					this.Onseat_idChanging(value);
					this.SendPropertyChanging();
					this._seat_id = value;
					this.SendPropertyChanged("seat_id");
					this.Onseat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flight_id", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string flight_id
		{
			get
			{
				return this._flight_id;
			}
			set
			{
				if ((this._flight_id != value))
				{
					if (this._Flight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onflight_idChanging(value);
					this.SendPropertyChanging();
					this._flight_id = value;
					this.SendPropertyChanged("flight_id");
					this.Onflight_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_end_auction_date", DbType="DateTime NOT NULL")]
		public System.DateTime end_auction_date
		{
			get
			{
				return this._end_auction_date;
			}
			set
			{
				if ((this._end_auction_date != value))
				{
					this.Onend_auction_dateChanging(value);
					this.SendPropertyChanging();
					this._end_auction_date = value;
					this.SendPropertyChanged("end_auction_date");
					this.Onend_auction_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Bid", Storage="_Bids", ThisKey="seat_id", OtherKey="seat_id")]
		public EntitySet<Bid> Bids
		{
			get
			{
				return this._Bids;
			}
			set
			{
				this._Bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Seat", Storage="_Flight", ThisKey="flight_id", OtherKey="Flight_id", IsForeignKey=true)]
		public Flight Flight
		{
			get
			{
				return this._Flight.Entity;
			}
			set
			{
				Flight previousValue = this._Flight.Entity;
				if (((previousValue != value) 
							|| (this._Flight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Flight.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._flight_id = value.Flight_id;
					}
					else
					{
						this._flight_id = default(string);
					}
					this.SendPropertyChanged("Flight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_Bids(Bid entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bid")]
	public partial class Bid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bid_id;
		
		private string _seat_id;
		
		private System.DateTime _time;
		
		private bool _isWinner;
		
		private int _cost;
		
		private EntitySet<Passenger_has_bid> _Passenger_has_bids;
		
		private EntityRef<Seat> _Seat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbid_idChanging(int value);
    partial void Onbid_idChanged();
    partial void Onseat_idChanging(string value);
    partial void Onseat_idChanged();
    partial void OntimeChanging(System.DateTime value);
    partial void OntimeChanged();
    partial void OnisWinnerChanging(bool value);
    partial void OnisWinnerChanged();
    partial void OncostChanging(int value);
    partial void OncostChanged();
    #endregion
		
		public Bid()
		{
			this._Passenger_has_bids = new EntitySet<Passenger_has_bid>(new Action<Passenger_has_bid>(this.attach_Passenger_has_bids), new Action<Passenger_has_bid>(this.detach_Passenger_has_bids));
			this._Seat = default(EntityRef<Seat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bid_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int bid_id
		{
			get
			{
				return this._bid_id;
			}
			set
			{
				if ((this._bid_id != value))
				{
					this.Onbid_idChanging(value);
					this.SendPropertyChanging();
					this._bid_id = value;
					this.SendPropertyChanged("bid_id");
					this.Onbid_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_seat_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string seat_id
		{
			get
			{
				return this._seat_id;
			}
			set
			{
				if ((this._seat_id != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onseat_idChanging(value);
					this.SendPropertyChanging();
					this._seat_id = value;
					this.SendPropertyChanged("seat_id");
					this.Onseat_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_time", DbType="DateTime NOT NULL")]
		public System.DateTime time
		{
			get
			{
				return this._time;
			}
			set
			{
				if ((this._time != value))
				{
					this.OntimeChanging(value);
					this.SendPropertyChanging();
					this._time = value;
					this.SendPropertyChanged("time");
					this.OntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isWinner", DbType="Bit NOT NULL")]
		public bool isWinner
		{
			get
			{
				return this._isWinner;
			}
			set
			{
				if ((this._isWinner != value))
				{
					this.OnisWinnerChanging(value);
					this.SendPropertyChanging();
					this._isWinner = value;
					this.SendPropertyChanged("isWinner");
					this.OnisWinnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cost", DbType="Int NOT NULL")]
		public int cost
		{
			get
			{
				return this._cost;
			}
			set
			{
				if ((this._cost != value))
				{
					this.OncostChanging(value);
					this.SendPropertyChanging();
					this._cost = value;
					this.SendPropertyChanged("cost");
					this.OncostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bid_Passenger_has_bid", Storage="_Passenger_has_bids", ThisKey="bid_id", OtherKey="bid_id")]
		public EntitySet<Passenger_has_bid> Passenger_has_bids
		{
			get
			{
				return this._Passenger_has_bids;
			}
			set
			{
				this._Passenger_has_bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_Bid", Storage="_Seat", ThisKey="seat_id", OtherKey="seat_id", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.Bids.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.Bids.Add(this);
						this._seat_id = value.seat_id;
					}
					else
					{
						this._seat_id = default(string);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Passenger_has_bids(Passenger_has_bid entity)
		{
			this.SendPropertyChanging();
			entity.Bid = this;
		}
		
		private void detach_Passenger_has_bids(Passenger_has_bid entity)
		{
			this.SendPropertyChanging();
			entity.Bid = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flight")]
	public partial class Flight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Flight_id;
		
		private int _distance;
		
		private System.DateTime _arrival_time;
		
		private System.DateTime _departure_time;
		
		private string _airport_departure_name;
		
		private string _airport_arrival_name;
		
		private EntitySet<Airline_Sale> _Airline_Sales;
		
		private EntitySet<Seat> _Seats;
		
		private EntityRef<Airport> _Airport;
		
		private EntityRef<Airport> _Airport1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlight_idChanging(string value);
    partial void OnFlight_idChanged();
    partial void OndistanceChanging(int value);
    partial void OndistanceChanged();
    partial void Onarrival_timeChanging(System.DateTime value);
    partial void Onarrival_timeChanged();
    partial void Ondeparture_timeChanging(System.DateTime value);
    partial void Ondeparture_timeChanged();
    partial void Onairport_departure_nameChanging(string value);
    partial void Onairport_departure_nameChanged();
    partial void Onairport_arrival_nameChanging(string value);
    partial void Onairport_arrival_nameChanged();
    #endregion
		
		public Flight()
		{
			this._Airline_Sales = new EntitySet<Airline_Sale>(new Action<Airline_Sale>(this.attach_Airline_Sales), new Action<Airline_Sale>(this.detach_Airline_Sales));
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			this._Airport = default(EntityRef<Airport>);
			this._Airport1 = default(EntityRef<Airport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flight_id", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Flight_id
		{
			get
			{
				return this._Flight_id;
			}
			set
			{
				if ((this._Flight_id != value))
				{
					this.OnFlight_idChanging(value);
					this.SendPropertyChanging();
					this._Flight_id = value;
					this.SendPropertyChanged("Flight_id");
					this.OnFlight_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Int NOT NULL")]
		public int distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this.OndistanceChanging(value);
					this.SendPropertyChanging();
					this._distance = value;
					this.SendPropertyChanged("distance");
					this.OndistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_arrival_time", DbType="DateTime NOT NULL")]
		public System.DateTime arrival_time
		{
			get
			{
				return this._arrival_time;
			}
			set
			{
				if ((this._arrival_time != value))
				{
					this.Onarrival_timeChanging(value);
					this.SendPropertyChanging();
					this._arrival_time = value;
					this.SendPropertyChanged("arrival_time");
					this.Onarrival_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_departure_time", DbType="DateTime NOT NULL")]
		public System.DateTime departure_time
		{
			get
			{
				return this._departure_time;
			}
			set
			{
				if ((this._departure_time != value))
				{
					this.Ondeparture_timeChanging(value);
					this.SendPropertyChanging();
					this._departure_time = value;
					this.SendPropertyChanged("departure_time");
					this.Ondeparture_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airport_departure_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string airport_departure_name
		{
			get
			{
				return this._airport_departure_name;
			}
			set
			{
				if ((this._airport_departure_name != value))
				{
					if ((this._Airport.HasLoadedOrAssignedValue || this._Airport1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onairport_departure_nameChanging(value);
					this.SendPropertyChanging();
					this._airport_departure_name = value;
					this.SendPropertyChanged("airport_departure_name");
					this.Onairport_departure_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airport_arrival_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string airport_arrival_name
		{
			get
			{
				return this._airport_arrival_name;
			}
			set
			{
				if ((this._airport_arrival_name != value))
				{
					this.Onairport_arrival_nameChanging(value);
					this.SendPropertyChanging();
					this._airport_arrival_name = value;
					this.SendPropertyChanged("airport_arrival_name");
					this.Onairport_arrival_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Airline_Sale", Storage="_Airline_Sales", ThisKey="Flight_id", OtherKey="Flight_id")]
		public EntitySet<Airline_Sale> Airline_Sales
		{
			get
			{
				return this._Airline_Sales;
			}
			set
			{
				this._Airline_Sales.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Seat", Storage="_Seats", ThisKey="Flight_id", OtherKey="flight_id")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight", Storage="_Airport", ThisKey="airport_departure_name", OtherKey="Name", IsForeignKey=true)]
		public Airport Airport
		{
			get
			{
				return this._Airport.Entity;
			}
			set
			{
				Airport previousValue = this._Airport.Entity;
				if (((previousValue != value) 
							|| (this._Airport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport.Entity = null;
						previousValue.Flights.Remove(this);
					}
					this._Airport.Entity = value;
					if ((value != null))
					{
						value.Flights.Add(this);
						this._airport_departure_name = value.Name;
					}
					else
					{
						this._airport_departure_name = default(string);
					}
					this.SendPropertyChanged("Airport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight1", Storage="_Airport1", ThisKey="airport_departure_name", OtherKey="Name", IsForeignKey=true)]
		public Airport Airport1
		{
			get
			{
				return this._Airport1.Entity;
			}
			set
			{
				Airport previousValue = this._Airport1.Entity;
				if (((previousValue != value) 
							|| (this._Airport1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport1.Entity = null;
						previousValue.Flights1.Remove(this);
					}
					this._Airport1.Entity = value;
					if ((value != null))
					{
						value.Flights1.Add(this);
						this._airport_departure_name = value.Name;
					}
					else
					{
						this._airport_departure_name = default(string);
					}
					this.SendPropertyChanged("Airport1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Airline_Sales(Airline_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Flight = this;
		}
		
		private void detach_Airline_Sales(Airline_Sale entity)
		{
			this.SendPropertyChanging();
			entity.Flight = null;
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Flight = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Flight = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airport")]
	public partial class Airport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _cityName;
		
		private System.Nullable<int> _number;
		
		private EntitySet<Flight> _Flights;
		
		private EntitySet<Flight> _Flights1;
		
		private EntitySet<Path> _Paths;
		
		private EntitySet<Path> _Paths1;
		
		private EntityRef<Major_City> _Major_City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OncityNameChanging(string value);
    partial void OncityNameChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    #endregion
		
		public Airport()
		{
			this._Flights = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights), new Action<Flight>(this.detach_Flights));
			this._Flights1 = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights1), new Action<Flight>(this.detach_Flights1));
			this._Paths = new EntitySet<Path>(new Action<Path>(this.attach_Paths), new Action<Path>(this.detach_Paths));
			this._Paths1 = new EntitySet<Path>(new Action<Path>(this.attach_Paths1), new Action<Path>(this.detach_Paths1));
			this._Major_City = default(EntityRef<Major_City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string cityName
		{
			get
			{
				return this._cityName;
			}
			set
			{
				if ((this._cityName != value))
				{
					if (this._Major_City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncityNameChanging(value);
					this.SendPropertyChanging();
					this._cityName = value;
					this.SendPropertyChanged("cityName");
					this.OncityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight", Storage="_Flights", ThisKey="Name", OtherKey="airport_departure_name")]
		public EntitySet<Flight> Flights
		{
			get
			{
				return this._Flights;
			}
			set
			{
				this._Flights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight1", Storage="_Flights1", ThisKey="Name", OtherKey="airport_departure_name")]
		public EntitySet<Flight> Flights1
		{
			get
			{
				return this._Flights1;
			}
			set
			{
				this._Flights1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Path", Storage="_Paths", ThisKey="Name", OtherKey="airport_name")]
		public EntitySet<Path> Paths
		{
			get
			{
				return this._Paths;
			}
			set
			{
				this._Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Path1", Storage="_Paths1", ThisKey="Name", OtherKey="airport2_name")]
		public EntitySet<Path> Paths1
		{
			get
			{
				return this._Paths1;
			}
			set
			{
				this._Paths1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_City_Airport", Storage="_Major_City", ThisKey="cityName", OtherKey="name", IsForeignKey=true)]
		public Major_City Major_City
		{
			get
			{
				return this._Major_City.Entity;
			}
			set
			{
				Major_City previousValue = this._Major_City.Entity;
				if (((previousValue != value) 
							|| (this._Major_City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major_City.Entity = null;
						previousValue.Airports.Remove(this);
					}
					this._Major_City.Entity = value;
					if ((value != null))
					{
						value.Airports.Add(this);
						this._cityName = value.name;
					}
					else
					{
						this._cityName = default(string);
					}
					this.SendPropertyChanged("Major_City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport = this;
		}
		
		private void detach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport = null;
		}
		
		private void attach_Flights1(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = this;
		}
		
		private void detach_Flights1(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = null;
		}
		
		private void attach_Paths(Path entity)
		{
			this.SendPropertyChanging();
			entity.Airport = this;
		}
		
		private void detach_Paths(Path entity)
		{
			this.SendPropertyChanging();
			entity.Airport = null;
		}
		
		private void attach_Paths1(Path entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = this;
		}
		
		private void detach_Paths1(Path entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major_City")]
	public partial class Major_City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _country_name;
		
		private EntitySet<Airport> _Airports;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Oncountry_nameChanging(string value);
    partial void Oncountry_nameChanged();
    #endregion
		
		public Major_City()
		{
			this._Airports = new EntitySet<Airport>(new Action<Airport>(this.attach_Airports), new Action<Airport>(this.detach_Airports));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string country_name
		{
			get
			{
				return this._country_name;
			}
			set
			{
				if ((this._country_name != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncountry_nameChanging(value);
					this.SendPropertyChanging();
					this._country_name = value;
					this.SendPropertyChanged("country_name");
					this.Oncountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_City_Airport", Storage="_Airports", ThisKey="name", OtherKey="cityName")]
		public EntitySet<Airport> Airports
		{
			get
			{
				return this._Airports;
			}
			set
			{
				this._Airports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Major_City", Storage="_Country", ThisKey="country_name", OtherKey="Name", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Major_Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Major_Cities.Add(this);
						this._country_name = value.Name;
					}
					else
					{
						this._country_name = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Airports(Airport entity)
		{
			this.SendPropertyChanging();
			entity.Major_City = this;
		}
		
		private void detach_Airports(Airport entity)
		{
			this.SendPropertyChanging();
			entity.Major_City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private EntitySet<Major_City> _Major_Cities;
		
		private EntitySet<Blacklist> _Blacklists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Major_Cities = new EntitySet<Major_City>(new Action<Major_City>(this.attach_Major_Cities), new Action<Major_City>(this.detach_Major_Cities));
			this._Blacklists = new EntitySet<Blacklist>(new Action<Blacklist>(this.attach_Blacklists), new Action<Blacklist>(this.detach_Blacklists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Major_City", Storage="_Major_Cities", ThisKey="Name", OtherKey="country_name")]
		public EntitySet<Major_City> Major_Cities
		{
			get
			{
				return this._Major_Cities;
			}
			set
			{
				this._Major_Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Blacklist", Storage="_Blacklists", ThisKey="Name", OtherKey="country_name")]
		public EntitySet<Blacklist> Blacklists
		{
			get
			{
				return this._Blacklists;
			}
			set
			{
				this._Blacklists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Major_Cities(Major_City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Major_Cities(Major_City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Blacklists(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Blacklists(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passenger_has_bid")]
	public partial class Passenger_has_bid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _bid_id;
		
		private string _passenger_passport_number;
		
		private EntityRef<Bid> _Bid;
		
		private EntityRef<Passenger> _Passenger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onbid_idChanging(int value);
    partial void Onbid_idChanged();
    partial void Onpassenger_passport_numberChanging(string value);
    partial void Onpassenger_passport_numberChanged();
    #endregion
		
		public Passenger_has_bid()
		{
			this._Bid = default(EntityRef<Bid>);
			this._Passenger = default(EntityRef<Passenger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bid_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int bid_id
		{
			get
			{
				return this._bid_id;
			}
			set
			{
				if ((this._bid_id != value))
				{
					if (this._Bid.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onbid_idChanging(value);
					this.SendPropertyChanging();
					this._bid_id = value;
					this.SendPropertyChanged("bid_id");
					this.Onbid_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passenger_passport_number", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string passenger_passport_number
		{
			get
			{
				return this._passenger_passport_number;
			}
			set
			{
				if ((this._passenger_passport_number != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpassenger_passport_numberChanging(value);
					this.SendPropertyChanging();
					this._passenger_passport_number = value;
					this.SendPropertyChanged("passenger_passport_number");
					this.Onpassenger_passport_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bid_Passenger_has_bid", Storage="_Bid", ThisKey="bid_id", OtherKey="bid_id", IsForeignKey=true)]
		public Bid Bid
		{
			get
			{
				return this._Bid.Entity;
			}
			set
			{
				Bid previousValue = this._Bid.Entity;
				if (((previousValue != value) 
							|| (this._Bid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bid.Entity = null;
						previousValue.Passenger_has_bids.Remove(this);
					}
					this._Bid.Entity = value;
					if ((value != null))
					{
						value.Passenger_has_bids.Add(this);
						this._bid_id = value.bid_id;
					}
					else
					{
						this._bid_id = default(int);
					}
					this.SendPropertyChanged("Bid");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Passenger_has_bid", Storage="_Passenger", ThisKey="passenger_passport_number", OtherKey="passport_number", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Passenger_has_bids.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Passenger_has_bids.Add(this);
						this._passenger_passport_number = value.passport_number;
					}
					else
					{
						this._passenger_passport_number = default(string);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passenger")]
	public partial class Passenger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _passport_number;
		
		private string _name;
		
		private System.DateTime _dateOfBirth;
		
		private string _citizenship;
		
		private bool _isMinor;
		
		private bool _hasWheelChair;
		
		private EntitySet<CreditCard> _CreditCards;
		
		private EntitySet<Passenger_has_bid> _Passenger_has_bids;
		
		private EntitySet<Blacklist> _Blacklists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpassport_numberChanging(string value);
    partial void Onpassport_numberChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndateOfBirthChanging(System.DateTime value);
    partial void OndateOfBirthChanged();
    partial void OncitizenshipChanging(string value);
    partial void OncitizenshipChanged();
    partial void OnisMinorChanging(bool value);
    partial void OnisMinorChanged();
    partial void OnhasWheelChairChanging(bool value);
    partial void OnhasWheelChairChanged();
    #endregion
		
		public Passenger()
		{
			this._CreditCards = new EntitySet<CreditCard>(new Action<CreditCard>(this.attach_CreditCards), new Action<CreditCard>(this.detach_CreditCards));
			this._Passenger_has_bids = new EntitySet<Passenger_has_bid>(new Action<Passenger_has_bid>(this.attach_Passenger_has_bids), new Action<Passenger_has_bid>(this.detach_Passenger_has_bids));
			this._Blacklists = new EntitySet<Blacklist>(new Action<Blacklist>(this.attach_Blacklists), new Action<Blacklist>(this.detach_Blacklists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passport_number", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string passport_number
		{
			get
			{
				return this._passport_number;
			}
			set
			{
				if ((this._passport_number != value))
				{
					this.Onpassport_numberChanging(value);
					this.SendPropertyChanging();
					this._passport_number = value;
					this.SendPropertyChanged("passport_number");
					this.Onpassport_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime dateOfBirth
		{
			get
			{
				return this._dateOfBirth;
			}
			set
			{
				if ((this._dateOfBirth != value))
				{
					this.OndateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._dateOfBirth = value;
					this.SendPropertyChanged("dateOfBirth");
					this.OndateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_citizenship", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string citizenship
		{
			get
			{
				return this._citizenship;
			}
			set
			{
				if ((this._citizenship != value))
				{
					this.OncitizenshipChanging(value);
					this.SendPropertyChanging();
					this._citizenship = value;
					this.SendPropertyChanged("citizenship");
					this.OncitizenshipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isMinor", DbType="Bit NOT NULL")]
		public bool isMinor
		{
			get
			{
				return this._isMinor;
			}
			set
			{
				if ((this._isMinor != value))
				{
					this.OnisMinorChanging(value);
					this.SendPropertyChanging();
					this._isMinor = value;
					this.SendPropertyChanged("isMinor");
					this.OnisMinorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasWheelChair", DbType="Bit NOT NULL")]
		public bool hasWheelChair
		{
			get
			{
				return this._hasWheelChair;
			}
			set
			{
				if ((this._hasWheelChair != value))
				{
					this.OnhasWheelChairChanging(value);
					this.SendPropertyChanging();
					this._hasWheelChair = value;
					this.SendPropertyChanged("hasWheelChair");
					this.OnhasWheelChairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_CreditCard", Storage="_CreditCards", ThisKey="passport_number", OtherKey="passport_number")]
		public EntitySet<CreditCard> CreditCards
		{
			get
			{
				return this._CreditCards;
			}
			set
			{
				this._CreditCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Passenger_has_bid", Storage="_Passenger_has_bids", ThisKey="passport_number", OtherKey="passenger_passport_number")]
		public EntitySet<Passenger_has_bid> Passenger_has_bids
		{
			get
			{
				return this._Passenger_has_bids;
			}
			set
			{
				this._Passenger_has_bids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Blacklist", Storage="_Blacklists", ThisKey="passport_number", OtherKey="passport_number")]
		public EntitySet<Blacklist> Blacklists
		{
			get
			{
				return this._Blacklists;
			}
			set
			{
				this._Blacklists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreditCards(CreditCard entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_CreditCards(CreditCard entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
		
		private void attach_Passenger_has_bids(Passenger_has_bid entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Passenger_has_bids(Passenger_has_bid entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
		
		private void attach_Blacklists(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = this;
		}
		
		private void detach_Blacklists(Blacklist entity)
		{
			this.SendPropertyChanging();
			entity.Passenger = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Blacklist")]
	public partial class Blacklist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _country_name;
		
		private string _passport_number;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Passenger> _Passenger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncountry_nameChanging(string value);
    partial void Oncountry_nameChanged();
    partial void Onpassport_numberChanging(string value);
    partial void Onpassport_numberChanged();
    #endregion
		
		public Blacklist()
		{
			this._Country = default(EntityRef<Country>);
			this._Passenger = default(EntityRef<Passenger>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_country_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string country_name
		{
			get
			{
				return this._country_name;
			}
			set
			{
				if ((this._country_name != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Oncountry_nameChanging(value);
					this.SendPropertyChanging();
					this._country_name = value;
					this.SendPropertyChanged("country_name");
					this.Oncountry_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passport_number", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string passport_number
		{
			get
			{
				return this._passport_number;
			}
			set
			{
				if ((this._passport_number != value))
				{
					if (this._Passenger.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onpassport_numberChanging(value);
					this.SendPropertyChanging();
					this._passport_number = value;
					this.SendPropertyChanged("passport_number");
					this.Onpassport_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Blacklist", Storage="_Country", ThisKey="country_name", OtherKey="Name", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Blacklists.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Blacklists.Add(this);
						this._country_name = value.Name;
					}
					else
					{
						this._country_name = default(string);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Passenger_Blacklist", Storage="_Passenger", ThisKey="passport_number", OtherKey="passport_number", IsForeignKey=true)]
		public Passenger Passenger
		{
			get
			{
				return this._Passenger.Entity;
			}
			set
			{
				Passenger previousValue = this._Passenger.Entity;
				if (((previousValue != value) 
							|| (this._Passenger.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Passenger.Entity = null;
						previousValue.Blacklists.Remove(this);
					}
					this._Passenger.Entity = value;
					if ((value != null))
					{
						value.Blacklists.Add(this);
						this._passport_number = value.passport_number;
					}
					else
					{
						this._passport_number = default(string);
					}
					this.SendPropertyChanged("Passenger");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Path")]
	public partial class Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _path_no;
		
		private string _flight_id;
		
		private int _distance;
		
		private string _airport_name;
		
		private string _airport2_name;
		
		private EntityRef<Airport> _Airport;
		
		private EntityRef<Airport> _Airport1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpath_noChanging(int value);
    partial void Onpath_noChanged();
    partial void Onflight_idChanging(string value);
    partial void Onflight_idChanged();
    partial void OndistanceChanging(int value);
    partial void OndistanceChanged();
    partial void Onairport_nameChanging(string value);
    partial void Onairport_nameChanged();
    partial void Onairport2_nameChanging(string value);
    partial void Onairport2_nameChanged();
    #endregion
		
		public Path()
		{
			this._Airport = default(EntityRef<Airport>);
			this._Airport1 = default(EntityRef<Airport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_path_no", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int path_no
		{
			get
			{
				return this._path_no;
			}
			set
			{
				if ((this._path_no != value))
				{
					this.Onpath_noChanging(value);
					this.SendPropertyChanging();
					this._path_no = value;
					this.SendPropertyChanged("path_no");
					this.Onpath_noChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_flight_id", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string flight_id
		{
			get
			{
				return this._flight_id;
			}
			set
			{
				if ((this._flight_id != value))
				{
					this.Onflight_idChanging(value);
					this.SendPropertyChanging();
					this._flight_id = value;
					this.SendPropertyChanged("flight_id");
					this.Onflight_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Int NOT NULL")]
		public int distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this.OndistanceChanging(value);
					this.SendPropertyChanging();
					this._distance = value;
					this.SendPropertyChanged("distance");
					this.OndistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airport_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string airport_name
		{
			get
			{
				return this._airport_name;
			}
			set
			{
				if ((this._airport_name != value))
				{
					if (this._Airport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onairport_nameChanging(value);
					this.SendPropertyChanging();
					this._airport_name = value;
					this.SendPropertyChanged("airport_name");
					this.Onairport_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_airport2_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string airport2_name
		{
			get
			{
				return this._airport2_name;
			}
			set
			{
				if ((this._airport2_name != value))
				{
					if (this._Airport1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onairport2_nameChanging(value);
					this.SendPropertyChanging();
					this._airport2_name = value;
					this.SendPropertyChanged("airport2_name");
					this.Onairport2_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Path", Storage="_Airport", ThisKey="airport_name", OtherKey="Name", IsForeignKey=true)]
		public Airport Airport
		{
			get
			{
				return this._Airport.Entity;
			}
			set
			{
				Airport previousValue = this._Airport.Entity;
				if (((previousValue != value) 
							|| (this._Airport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport.Entity = null;
						previousValue.Paths.Remove(this);
					}
					this._Airport.Entity = value;
					if ((value != null))
					{
						value.Paths.Add(this);
						this._airport_name = value.Name;
					}
					else
					{
						this._airport_name = default(string);
					}
					this.SendPropertyChanged("Airport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Path1", Storage="_Airport1", ThisKey="airport2_name", OtherKey="Name", IsForeignKey=true)]
		public Airport Airport1
		{
			get
			{
				return this._Airport1.Entity;
			}
			set
			{
				Airport previousValue = this._Airport1.Entity;
				if (((previousValue != value) 
							|| (this._Airport1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport1.Entity = null;
						previousValue.Paths1.Remove(this);
					}
					this._Airport1.Entity = value;
					if ((value != null))
					{
						value.Paths1.Add(this);
						this._airport2_name = value.Name;
					}
					else
					{
						this._airport2_name = default(string);
					}
					this.SendPropertyChanged("Airport1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
